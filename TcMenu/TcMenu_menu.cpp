/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for Arduino ESP32 by TcMenu 4.4.0 on 2025-01-14T17:58:47.649338Z.

#include <tcMenu.h>
#include "TcMenu_menu.h"
#include "ThemeDarkModeModernBuilder.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "New Device", "4b46c4a2-35ba-4012-b664-7bc18a87fdee" };
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
Adafruit_ST7789 gfx(-1, -1, -1);
AdafruitDrawable gfxDrawable(&gfx, 0);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);
Adafruit_FT6206 touchDevice;
iotouch::AdaLibTouchInterrogator touchInterrogator(touchDevice);
iotouch::TouchOrientationSettings touchOrientation(false, false, false);
MenuTouchScreenManager touchScreen(&touchInterrogator, &renderer, touchOrientation);
tcextras::IoaTouchScreenCalibrator touchCalibrator(&touchScreen, &renderer, 400);

// Global Menu Item declarations
const PROGMEM AnalogMenuInfo minfoPort = { "Port", 20, 54, 9999, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuPort(&minfoPort, 8080, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoPassword = { "Password", 19, 44, 0, NO_CALLBACK };
TextMenuItem menuPassword(&minfoPassword, "", 10, &menuPort, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoAPName = { "AP Name", 18, 28, 0, NO_CALLBACK };
TextMenuItem menuAPName(&minfoAPName, "", 16, &menuPassword, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoNetworkSettings = { "Network Settings", 17, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackNetworkSettings(&minfoNetworkSettings, &menuAPName, INFO_LOCATION_PGM);
SubMenuItem menuNetworkSettings(&minfoNetworkSettings, &menuBackNetworkSettings, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoRearRightTempIndex = { "Rear Right", 15, 26, 7, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuRearRightTempIndex(&minfoRearRightTempIndex, 3, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoRearLeftTempIndex = { "Rear Left", 16, 24, 7, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuRearLeftTempIndex(&minfoRearLeftTempIndex, 2, &menuRearRightTempIndex, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoFrontRightTempIndex = { "Front Right", 14, 22, 7, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuFrontRightTempIndex(&minfoFrontRightTempIndex, 1, &menuRearLeftTempIndex, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoFrontLeftTempIndex = { "Front Left", 13, 20, 7, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuFrontLeftTempIndex(&minfoFrontLeftTempIndex, 0, &menuFrontRightTempIndex, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoTempSensorIndices = { "Temp Sensor Indices", 12, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackTempSensorIndices(&minfoTempSensorIndices, &menuFrontLeftTempIndex, INFO_LOCATION_PGM);
SubMenuItem menuTempSensorIndices(&minfoTempSensorIndices, &menuBackTempSensorIndices, &menuNetworkSettings, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoHardwareSettings = { "Hardware Settings", 11, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackHardwareSettings(&minfoHardwareSettings, &menuTempSensorIndices, INFO_LOCATION_PGM);
SubMenuItem menuHardwareSettings(&minfoHardwareSettings, &menuBackHardwareSettings, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfotrackMax = { "Max", 10, 18, 255, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menutrackMax(&minfotrackMax, 180, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfotrackIdeal = { "Ideal", 9, 16, 255, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menutrackIdeal(&minfotrackIdeal, 160, &menutrackMax, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfotrackMin = { "Min", 8, 14, 255, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menutrackMin(&minfotrackMin, 100, &menutrackIdeal, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoTrackSettings = { "Track Settings", 7, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackTrackSettings(&minfoTrackSettings, &menutrackMin, INFO_LOCATION_PGM);
SubMenuItem menuTrackSettings(&minfoTrackSettings, &menuBackTrackSettings, &menuHardwareSettings, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfostreetMax = { "Max", 6, 10, 255, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menustreetMax(&minfostreetMax, 180, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfostreetIdeal = { "Ideal", 4, 6, 255, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menustreetIdeal(&minfostreetIdeal, 160, &menustreetMax, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfostreetMin = { "Min", 5, 8, 255, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menustreetMin(&minfostreetMin, 100, &menustreetIdeal, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoStreetSettings = { "Street Settings", 3, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackStreetSettings(&minfoStreetSettings, &menustreetMin, INFO_LOCATION_PGM);
SubMenuItem menuStreetSettings(&minfoStreetSettings, &menuBackStreetSettings, &menuTrackSettings, INFO_LOCATION_PGM);
const char enumStrTemperatureScale_0[] PROGMEM = "Farenheit";
const char enumStrTemperatureScale_1[] PROGMEM = "Celsius";
const char* const enumStrTemperatureScale[] PROGMEM  = { enumStrTemperatureScale_0, enumStrTemperatureScale_1 };
const PROGMEM EnumMenuInfo minfoTemperatureScale = { "Temperature Scale", 2, 0xffff, 1, NO_CALLBACK, enumStrTemperatureScale };
EnumMenuItem menuTemperatureScale(&minfoTemperatureScale, 0, &menuStreetSettings, INFO_LOCATION_PGM);
const char enumStrCurrentMode_0[] PROGMEM = "Street";
const char enumStrCurrentMode_1[] PROGMEM = "Track";
const char* const enumStrCurrentMode[] PROGMEM  = { enumStrCurrentMode_0, enumStrCurrentMode_1 };
const PROGMEM EnumMenuInfo minfoCurrentMode = { "Current Mode", 1, 0xffff, 1, NO_CALLBACK, enumStrCurrentMode };
EnumMenuItem menuCurrentMode(&minfoCurrentMode, 0, &menuTemperatureScale, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(true);
    menuMgr.setEepromRef(&glArduinoEeprom);
    // Code generated by plugins and new operators.
    gfx.init(280, 240);
    gfx.setRotation(3);
    renderer.setUpdatesPerSecond(5);
    touchInterrogator.init();
    touchScreen.start();
    menuMgr.initWithoutInput(&renderer, &menuCurrentMode);
    installDarkModeModernTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(nullptr, 1), false, BaseGraphicalRenderer::TITLE_FIRST_ROW, false);
}

